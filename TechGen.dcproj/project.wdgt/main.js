/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
	WriteGenius();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}


///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

function CreateGenius() {
	return Column1[GetRandomPosition(Column1.length-1)] + " " 
		+ Column2[GetRandomPosition(Column2.length-1)] + " " 
		+ Column3[GetRandomPosition(Column3.length-1)];
}

function GetRandomPosition(len) {
	var x = Math.round(((Math.random() * len) % len));
	if(x > len)
		x = len;
		
	return x;
}

function WriteGenius() {
	var domInsult = document.getElementById("readout");
	domInsult.innerHTML = CreateGenius();
}

////////////////////// Mac Cut Copy Paste //////////////////////
function docut(event) {
	//just do the same thing for cut and copy
	docopy(event);
}

/*
 copy the current value to the clipboard
*/
function docopy(event) {
	var domInsult = document.getElementById("readout");
	var strinslt = domInsult.innerHTML;
	
	event.clipboardData.setData('text/plain', strinslt);
	event.preventDefault();
	event.stopPropagation();
}

function dopaste (event) {
	var clip = event.clipboardData.getData('text/plain');
	
	//loop over the clipboard
	//var plen = clip.length;
	//for(var i = 0; i < plen; i++)
	//{
	//}
	event.preventDefault();
	event.stopPropagation();
}
////////////////////// Mac Cut Copy Paste //////////////////////
